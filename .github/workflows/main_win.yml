name: Midday build (Windows)

on:
  push:
    branches:
     - "**"
  pull_request:
    branches:
     - "**"

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build-pack-win64:
    runs-on: windows-2022
    steps:
      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '6.0.x'
      - uses: actions/checkout@v2

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.1

      - uses: actions/setup-python@v2
        with:
          python-version: '3.13'

      - uses: actions/cache@v4
        with:
          path: C:/gtk-build
          key: ${{ runner.os }}-gtk-build-${{ hashFiles('C:/gtk-build/**/*.*') }}
          restore-keys: |
            ${{ runner.os }}-gtk-build-

      - run: py -3.13 -m pip install --user pipx
      - run: py -3.13 -m pipx ensurepath
      - run: pipx install gvsbuild
      - run: gvsbuild build gtk4 libadwaita librsvg
      - run: echo "C:\gtk-build\gtk\x64\release\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Update dependencies
        run: bash update_dependencies_win.sh

      - name: Generate version
        run: bash src/common/src/generate-version.sh

      - name: Build .Net
        run: dotnet publish src_old -c Release -m

      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build Rust
        run: cargo build --release

      - name: Pack
        run: bash pack_win.sh
        
      - uses: actions/upload-artifact@v4
        with:
          name: Sonic4ModLoader_win
          path: dist/Sonic4ModLoader_win.zip

      - uses: actions/upload-artifact@v4
        with:
          name: SHA256SUMS_win
          path: dist/SHA256SUMS_win

      - uses: actions/upload-artifact@v4
        with:
          name: AMBPatcher
          path: dist/Sonic4ModLoader/AMBPatcher.exe

      - uses: actions/upload-artifact@v4
        with:
          name: amb-rs-win
          path: dist/Sonic4ModLoader/amb-rs.exe


  tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '6.0.x'
      - uses: actions/checkout@v2

      - name: Build AMBPatcher
        run: |
          dotnet publish src_old/AMBPatcher -c Release --os linux
          mkdir -p "./dist/Sonic4ModLoader/Mod Loader - licenses"
          cp "./src_old/AMBPatcher/bin/Release/net6.0/linux-x64/publish/AMBPatcher" "./dist/Sonic4ModLoader/AMBPatcher.exe"

      - name: Run tests
        run: bash ./tests/run_tests.sh --no-crash